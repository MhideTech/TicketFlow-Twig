{% extends "base.twig" %}
{% import 'components/_lucide_icon.twig' as icon %}

{% block content %}
<main x-data="ticketsPage(JSON.parse('{{ tickets|json_encode()|e('js') }}'))" class="min-h-[calc(100vh-8rem)] bg-gray-50 py-8" x-cloak>
  <div class="max-w-[1440px] mx-auto px-4 sm:px-8">

    <!-- Header -->
    <div class="flex flex-col md:flex-row items-start md:items-center justify-between mb-8">
      <div>
        <h1 class="text-3xl font-bold text-gray-900 mb-2">Tickets</h1>
        <p class="text-gray-600">Manage and track all your tickets</p>
      </div>
      <button @click="openForm()"
        class="mt-4 md:mt-0 inline-flex items-center px-4 py-2 text-white bg-green-600 rounded-lg hover:bg-green-700 transition-colors font-medium shadow-md hover:shadow-lg">
        <svg xmlns="http://www.w3.org/2000/svg" class="w-5 h-5 mr-2" fill="none" viewBox="0 0 24 24"
          stroke="currentColor"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
          d="M12 4v16m8-8H4" /></svg>
        Create Ticket
      </button>
    </div>

    <!-- Search + Filter -->
    <div class="bg-white rounded-xl shadow-md p-6 mb-6 border border-gray-200">
      <div class="flex flex-col md:flex-row gap-4">
        <div class="flex-1 relative">
          <svg class="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400" fill="none"
            stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
              d="M21 21l-4.35-4.35m0 0A7.5 7.5 0 104.5 4.5a7.5 7.5 0 0012.15 12.15z" />
          </svg>
          <input x-model="searchTerm" type="text" placeholder="Search tickets..."
            class="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent transition-shadow" />
        </div>

        <div class="flex items-center space-x-2">
          {{ icon.render('filter', 28, 'w-5 h-5 text-gray-400') }}
          <select x-model="statusFilter"
            class="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-transparent transition-shadow">
            <option value="all">All Status</option>
            <option value="open">Open</option>
            <option value="in_progress">In Progress</option>
            <option value="closed">Closed</option>
          </select>
        </div>
      </div>
    </div>

    <!-- Loading -->
    <template x-if="loading">
      <div class="text-center py-12">
        <div class="inline-block animate-spin rounded-full h-12 w-12 border-b-2 border-green-600"></div>
      </div>
    </template>

    <!-- Empty State -->
    <template x-if="!loading && filteredTickets().length === 0">
      <div class="bg-white rounded-xl shadow-md p-12 text-center border border-gray-200">
        <div class="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
          <svg class="w-8 h-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2"
              d="M21 21l-4.35-4.35m0 0A7.5 7.5 0 104.5 4.5a7.5 7.5 0 0012.15 12.15z" />
          </svg>
        </div>
        <h3 class="text-lg font-bold text-gray-900 mb-2"
          x-text="searchTerm || statusFilter !== 'all' ? 'No tickets found' : 'No tickets yet'"></h3>
        <p class="text-gray-600 mb-4"
          x-text="searchTerm || statusFilter !== 'all' ? 'Try adjusting your search or filters' : 'Create your first ticket to get started'"></p>
        <template x-if="!searchTerm && statusFilter === 'all'">
          <button @click="openForm()"
            class="inline-flex items-center px-4 py-2 text-white bg-green-600 rounded-lg hover:bg-green-700 transition-colors font-medium">
            <svg xmlns='http://www.w3.org/2000/svg' class='w-5 h-5 mr-2' fill='none' viewBox='0 0 24 24'
              stroke='currentColor'><path stroke-linecap='round' stroke-linejoin='round' stroke-width='2'
              d='M12 4v16m8-8H4' /></svg>
            Create Ticket
          </button>
        </template>
      </div>
    </template>

    <!-- Ticket List -->
    <div x-show="!loading && filteredTickets().length > 0" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
      <template x-for="ticket in filteredTickets()" :key="ticket.id">
        <div class="bg-white p-5 rounded-xl shadow-md border border-gray-200 flex flex-col justify-between">
          <div>
            <h3 class="text-lg font-bold text-gray-900 mb-1" x-text="ticket.title"></h3>
            <p class="text-gray-600 text-sm mb-3" x-text="ticket.description"></p>
            <span
              class="inline-block px-2 py-1 text-xs font-semibold rounded-full uppercase"
              :class="{
                'bg-green-100 text-green-700': ticket.status === 'open',
                'bg-yellow-100 text-yellow-700': ticket.status === 'in_progress',
                'bg-gray-200 text-gray-800': ticket.status === 'closed'
              }"
              x-text="ticket.status.replace('_', ' ')">
            </span>
            <span
              class="inline-block px-2 py-1 text-xs font-semibold rounded-full uppercase"
              :class="{
                'bg-blue-100 text-blue-800': ticket.priority === 'low',
                'bg-orange-100 text-orange-800': ticket.priority === 'medium',
                'bg-red-100 text-red-800': ticket.priority === 'high'
              }"
              x-text="ticket.priority.replace('_', ' ')">
            </span>
          </div>
          <div class="flex justify-end space-x-2 mt-4">
            <button @click="editTicket(ticket)"
              class="px-3 py-1 text-sm bg-blue-50 text-blue-700 rounded-lg hover:bg-blue-100">Edit</button>
            <button @click="confirmDelete(ticket.id)"
              class="px-3 py-1 text-sm bg-red-50 text-red-700 rounded-lg hover:bg-red-100">Delete</button>
          </div>
        </div>
      </template>
    </div>

    <!-- Ticket Form Modal -->
    {% include "pages/tickets/form.twig" %}
  </div>
</main>

<script>
function ticketsPage(initialTickets = []) {
  return {
    loading: false,
    tickets: Array.isArray(initialTickets) ? initialTickets : [],
    searchTerm: '',
    statusFilter: 'all',
    showForm: false,
    editingTicket: null,
    isSubmitting: false,
    isNavigating: false,

    // Client-side navigation handler
    async navigateTo(url) {
      this.isNavigating = true;
      try {
        const response = await fetch(url);
        const text = await response.text();
        const parser = new DOMParser();
        const doc = parser.parseFromString(text, 'text/html');
        const newContent = doc.querySelector('main').innerHTML;
        this.$root.innerHTML = newContent;
        window.history.pushState({}, '', url);
      } finally {
        this.isNavigating = false;
      }
    },

    // form state now includes priority
    form: {
      title: '',
      description: '',
      status: 'open',
      priority: 'medium'
    },

    // simple client-side form errors for inline messages
    formErrors: {
      title: null,
      description: null,
      status: null
    },

    // FILTERING
    filteredTickets() {
      return this.tickets.filter(ticket => {
        const matchesSearch =
          ticket.title.toLowerCase().includes(this.searchTerm.toLowerCase()) ||
          (ticket.description && ticket.description.toLowerCase().includes(this.searchTerm.toLowerCase()));
        const matchesStatus =
          this.statusFilter === 'all' || ticket.status === this.statusFilter;
        return matchesSearch && matchesStatus;
      });
    },

    // FORM CONTROL
    openForm() {
      this.editingTicket = null;
      this.resetForm();
      this.showForm = true;
    },

    closeForm() {
      this.showForm = false;
      this.editingTicket = null;
      this.resetForm();
      this.clearErrors();
    },

    editTicket(ticket) {
      this.editingTicket = { ...ticket };
      // copy into form (ensure keys exist)
      this.form = {
        title: ticket.title || '',
        description: ticket.description || '',
        status: (['open','in_progress','closed'].includes(ticket.status) ? ticket.status : 'open'),
        priority: ticket.priority || 'medium'
      };
      this.clearErrors();
      this.showForm = true;
    },

    // Validate required fields and allowed status values
    validateForm() {
      let ok = true;
      this.clearErrors();

      if (!this.form.title || this.form.title.trim() === '') {
        this.formErrors.title = 'Title is required.';
        ok = false;
      } else if (this.form.title.length > 200) {
        this.formErrors.title = 'Title must be 200 characters or fewer.';
        ok = false;
      }

      if (this.form.description && this.form.description.length > 2000) {
        this.formErrors.description = 'Description must be 2000 characters or fewer.';
        ok = false;
      }

      const allowedStatuses = ['open','in_progress','closed'];
      if (!allowedStatuses.includes(this.form.status)) {
        this.formErrors.status = 'Invalid status selected.';
        ok = false;
      }

      return ok;
    },

    clearErrors() {
      this.formErrors.title = null;
      this.formErrors.description = null;
      this.formErrors.status = null;
    },

    resetForm() {
      this.form = { title: '', description: '', status: 'open', priority: 'medium' };
    },

    // CREATE / UPDATE (persist to session via AJAX)
async saveTicket() {
  if (!this.validateForm()) return;

  const payload = {
    title: this.form.title.trim(),
    description: this.form.description.trim(),
    status: this.form.status,
    priority: this.form.priority,
  };

  const method = this.editingTicket ? 'PUT' : 'POST';
  if (this.editingTicket) payload.id = this.editingTicket.id;

  try {
    const res = await fetch('/pages/tickets/tickets_api.php', {
      method,
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(payload),
    });

    const data = await res.json();

    if (method === 'POST') {
      this.tickets.push(data);
    } else {
      const idx = this.tickets.findIndex(t => t.id === data.id);
      if (idx !== -1) this.tickets[idx] = data;
    }

    this.closeForm();
  } catch (err) {
    alert('Failed to save ticket');
    console.error(err);
  }
},

// DELETE (persist to session)
async confirmDelete(id) {
  if (!confirm('Delete this ticket?')) return;

  try {
    const res = await fetch('/pages/tickets/tickets_api.php', {
      method: 'DELETE',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ id }),
    });

    const data = await res.json();
    if (data.success) {
      this.tickets = this.tickets.filter(t => t.id !== id);
    }
  } catch (err) {
    alert('Failed to delete ticket');
    console.error(err);
  }
}

  }
}
</script>

{% endblock %}
